"use strict";
// source: data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var resources_pb = require('./resources_pb.js');
goog.object.extend(proto, resources_pb);
goog.exportSymbol('proto.api_pb.AddLimitOrderData', null, global);
goog.exportSymbol('proto.api_pb.AddLiquidityData', null, global);
goog.exportSymbol('proto.api_pb.BurnTokenData', null, global);
goog.exportSymbol('proto.api_pb.BuyCoinData', null, global);
goog.exportSymbol('proto.api_pb.BuySwapPoolData', null, global);
goog.exportSymbol('proto.api_pb.CreateCoinData', null, global);
goog.exportSymbol('proto.api_pb.CreateMultisigData', null, global);
goog.exportSymbol('proto.api_pb.CreateSwapPoolData', null, global);
goog.exportSymbol('proto.api_pb.CreateTokenData', null, global);
goog.exportSymbol('proto.api_pb.DeclareCandidacyData', null, global);
goog.exportSymbol('proto.api_pb.DelegateData', null, global);
goog.exportSymbol('proto.api_pb.EditCandidateCommission', null, global);
goog.exportSymbol('proto.api_pb.EditCandidateData', null, global);
goog.exportSymbol('proto.api_pb.EditCandidatePublicKeyData', null, global);
goog.exportSymbol('proto.api_pb.EditCoinOwnerData', null, global);
goog.exportSymbol('proto.api_pb.EditMultisigData', null, global);
goog.exportSymbol('proto.api_pb.LockData', null, global);
goog.exportSymbol('proto.api_pb.LockStakeData', null, global);
goog.exportSymbol('proto.api_pb.MintTokenData', null, global);
goog.exportSymbol('proto.api_pb.MoveStakeData', null, global);
goog.exportSymbol('proto.api_pb.MultiSendData', null, global);
goog.exportSymbol('proto.api_pb.RecreateCoinData', null, global);
goog.exportSymbol('proto.api_pb.RecreateTokenData', null, global);
goog.exportSymbol('proto.api_pb.RedeemCheckData', null, global);
goog.exportSymbol('proto.api_pb.RemoveLimitOrderData', null, global);
goog.exportSymbol('proto.api_pb.RemoveLiquidityData', null, global);
goog.exportSymbol('proto.api_pb.SellAllCoinData', null, global);
goog.exportSymbol('proto.api_pb.SellAllSwapPoolData', null, global);
goog.exportSymbol('proto.api_pb.SellCoinData', null, global);
goog.exportSymbol('proto.api_pb.SellSwapPoolData', null, global);
goog.exportSymbol('proto.api_pb.SendData', null, global);
goog.exportSymbol('proto.api_pb.SetCandidateOffData', null, global);
goog.exportSymbol('proto.api_pb.SetCandidateOnData', null, global);
goog.exportSymbol('proto.api_pb.SetHaltBlockData', null, global);
goog.exportSymbol('proto.api_pb.UnbondData', null, global);
goog.exportSymbol('proto.api_pb.VoteCommissionData', null, global);
goog.exportSymbol('proto.api_pb.VoteUpdateData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.SendData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.SendData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.SendData.displayName = 'proto.api_pb.SendData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.SellCoinData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.SellCoinData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.SellCoinData.displayName = 'proto.api_pb.SellCoinData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.SellAllCoinData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.SellAllCoinData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.SellAllCoinData.displayName = 'proto.api_pb.SellAllCoinData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.BuyCoinData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.BuyCoinData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.BuyCoinData.displayName = 'proto.api_pb.BuyCoinData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.CreateCoinData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.CreateCoinData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.CreateCoinData.displayName = 'proto.api_pb.CreateCoinData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.DeclareCandidacyData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.DeclareCandidacyData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.DeclareCandidacyData.displayName = 'proto.api_pb.DeclareCandidacyData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.DelegateData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.DelegateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.DelegateData.displayName = 'proto.api_pb.DelegateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.UnbondData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.UnbondData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.UnbondData.displayName = 'proto.api_pb.UnbondData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.RedeemCheckData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.RedeemCheckData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.RedeemCheckData.displayName = 'proto.api_pb.RedeemCheckData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.SetCandidateOnData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.SetCandidateOnData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.SetCandidateOnData.displayName = 'proto.api_pb.SetCandidateOnData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.SetCandidateOffData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.SetCandidateOffData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.SetCandidateOffData.displayName = 'proto.api_pb.SetCandidateOffData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.CreateMultisigData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.api_pb.CreateMultisigData.repeatedFields_, null);
};
goog.inherits(proto.api_pb.CreateMultisigData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.CreateMultisigData.displayName = 'proto.api_pb.CreateMultisigData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.MultiSendData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.api_pb.MultiSendData.repeatedFields_, null);
};
goog.inherits(proto.api_pb.MultiSendData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.MultiSendData.displayName = 'proto.api_pb.MultiSendData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.EditCandidateData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.EditCandidateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.EditCandidateData.displayName = 'proto.api_pb.EditCandidateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.SetHaltBlockData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.SetHaltBlockData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.SetHaltBlockData.displayName = 'proto.api_pb.SetHaltBlockData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.RecreateCoinData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.RecreateCoinData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.RecreateCoinData.displayName = 'proto.api_pb.RecreateCoinData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.EditCoinOwnerData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.EditCoinOwnerData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.EditCoinOwnerData.displayName = 'proto.api_pb.EditCoinOwnerData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.EditMultisigData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.api_pb.EditMultisigData.repeatedFields_, null);
};
goog.inherits(proto.api_pb.EditMultisigData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.EditMultisigData.displayName = 'proto.api_pb.EditMultisigData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.EditCandidatePublicKeyData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.EditCandidatePublicKeyData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.EditCandidatePublicKeyData.displayName = 'proto.api_pb.EditCandidatePublicKeyData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.CreateSwapPoolData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.CreateSwapPoolData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.CreateSwapPoolData.displayName = 'proto.api_pb.CreateSwapPoolData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.AddLiquidityData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.AddLiquidityData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.AddLiquidityData.displayName = 'proto.api_pb.AddLiquidityData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.RemoveLiquidityData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.RemoveLiquidityData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.RemoveLiquidityData.displayName = 'proto.api_pb.RemoveLiquidityData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.SellSwapPoolData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.api_pb.SellSwapPoolData.repeatedFields_, null);
};
goog.inherits(proto.api_pb.SellSwapPoolData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.SellSwapPoolData.displayName = 'proto.api_pb.SellSwapPoolData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.SellAllSwapPoolData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.api_pb.SellAllSwapPoolData.repeatedFields_, null);
};
goog.inherits(proto.api_pb.SellAllSwapPoolData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.SellAllSwapPoolData.displayName = 'proto.api_pb.SellAllSwapPoolData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.BuySwapPoolData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.api_pb.BuySwapPoolData.repeatedFields_, null);
};
goog.inherits(proto.api_pb.BuySwapPoolData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.BuySwapPoolData.displayName = 'proto.api_pb.BuySwapPoolData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.EditCandidateCommission = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.EditCandidateCommission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.EditCandidateCommission.displayName = 'proto.api_pb.EditCandidateCommission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.MintTokenData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.MintTokenData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.MintTokenData.displayName = 'proto.api_pb.MintTokenData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.BurnTokenData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.BurnTokenData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.BurnTokenData.displayName = 'proto.api_pb.BurnTokenData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.CreateTokenData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.CreateTokenData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.CreateTokenData.displayName = 'proto.api_pb.CreateTokenData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.RecreateTokenData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.RecreateTokenData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.RecreateTokenData.displayName = 'proto.api_pb.RecreateTokenData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.VoteCommissionData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.VoteCommissionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.VoteCommissionData.displayName = 'proto.api_pb.VoteCommissionData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.VoteUpdateData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.VoteUpdateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.VoteUpdateData.displayName = 'proto.api_pb.VoteUpdateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.AddLimitOrderData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.AddLimitOrderData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.AddLimitOrderData.displayName = 'proto.api_pb.AddLimitOrderData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.RemoveLimitOrderData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.RemoveLimitOrderData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.RemoveLimitOrderData.displayName = 'proto.api_pb.RemoveLimitOrderData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.MoveStakeData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.MoveStakeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.MoveStakeData.displayName = 'proto.api_pb.MoveStakeData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.LockStakeData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.LockStakeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.LockStakeData.displayName = 'proto.api_pb.LockStakeData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api_pb.LockData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api_pb.LockData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.api_pb.LockData.displayName = 'proto.api_pb.LockData';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.SendData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.SendData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.SendData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.SendData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coin: (f = msg.getCoin()) && resources_pb.Coin.toObject(includeInstance, f),
            to: jspb.Message.getFieldWithDefault(msg, 2, ""),
            value: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.SendData}
 */
proto.api_pb.SendData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.SendData;
    return proto.api_pb.SendData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.SendData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.SendData}
 */
proto.api_pb.SendData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTo(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.SendData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.SendData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.SendData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.SendData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoin();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getTo();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional Coin coin = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.SendData.prototype.getCoin = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.SendData} returns this
*/
proto.api_pb.SendData.prototype.setCoin = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.SendData} returns this
 */
proto.api_pb.SendData.prototype.clearCoin = function () {
    return this.setCoin(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.SendData.prototype.hasCoin = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string to = 2;
 * @return {string}
 */
proto.api_pb.SendData.prototype.getTo = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SendData} returns this
 */
proto.api_pb.SendData.prototype.setTo = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.api_pb.SendData.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SendData} returns this
 */
proto.api_pb.SendData.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.SellCoinData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.SellCoinData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.SellCoinData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.SellCoinData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coinToSell: (f = msg.getCoinToSell()) && resources_pb.Coin.toObject(includeInstance, f),
            valueToSell: jspb.Message.getFieldWithDefault(msg, 2, ""),
            coinToBuy: (f = msg.getCoinToBuy()) && resources_pb.Coin.toObject(includeInstance, f),
            minimumValueToBuy: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.SellCoinData}
 */
proto.api_pb.SellCoinData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.SellCoinData;
    return proto.api_pb.SellCoinData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.SellCoinData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.SellCoinData}
 */
proto.api_pb.SellCoinData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoinToSell(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValueToSell(value);
                break;
            case 3:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoinToBuy(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setMinimumValueToBuy(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.SellCoinData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.SellCoinData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.SellCoinData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.SellCoinData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoinToSell();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValueToSell();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getCoinToBuy();
    if (f != null) {
        writer.writeMessage(3, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getMinimumValueToBuy();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional Coin coin_to_sell = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.SellCoinData.prototype.getCoinToSell = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.SellCoinData} returns this
*/
proto.api_pb.SellCoinData.prototype.setCoinToSell = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.SellCoinData} returns this
 */
proto.api_pb.SellCoinData.prototype.clearCoinToSell = function () {
    return this.setCoinToSell(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.SellCoinData.prototype.hasCoinToSell = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string value_to_sell = 2;
 * @return {string}
 */
proto.api_pb.SellCoinData.prototype.getValueToSell = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SellCoinData} returns this
 */
proto.api_pb.SellCoinData.prototype.setValueToSell = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional Coin coin_to_buy = 3;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.SellCoinData.prototype.getCoinToBuy = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 3));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.SellCoinData} returns this
*/
proto.api_pb.SellCoinData.prototype.setCoinToBuy = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.SellCoinData} returns this
 */
proto.api_pb.SellCoinData.prototype.clearCoinToBuy = function () {
    return this.setCoinToBuy(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.SellCoinData.prototype.hasCoinToBuy = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional string minimum_value_to_buy = 4;
 * @return {string}
 */
proto.api_pb.SellCoinData.prototype.getMinimumValueToBuy = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SellCoinData} returns this
 */
proto.api_pb.SellCoinData.prototype.setMinimumValueToBuy = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.SellAllCoinData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.SellAllCoinData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.SellAllCoinData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.SellAllCoinData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coinToSell: (f = msg.getCoinToSell()) && resources_pb.Coin.toObject(includeInstance, f),
            coinToBuy: (f = msg.getCoinToBuy()) && resources_pb.Coin.toObject(includeInstance, f),
            minimumValueToBuy: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.SellAllCoinData}
 */
proto.api_pb.SellAllCoinData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.SellAllCoinData;
    return proto.api_pb.SellAllCoinData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.SellAllCoinData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.SellAllCoinData}
 */
proto.api_pb.SellAllCoinData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoinToSell(value);
                break;
            case 2:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoinToBuy(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setMinimumValueToBuy(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.SellAllCoinData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.SellAllCoinData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.SellAllCoinData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.SellAllCoinData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoinToSell();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getCoinToBuy();
    if (f != null) {
        writer.writeMessage(2, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getMinimumValueToBuy();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional Coin coin_to_sell = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.SellAllCoinData.prototype.getCoinToSell = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.SellAllCoinData} returns this
*/
proto.api_pb.SellAllCoinData.prototype.setCoinToSell = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.SellAllCoinData} returns this
 */
proto.api_pb.SellAllCoinData.prototype.clearCoinToSell = function () {
    return this.setCoinToSell(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.SellAllCoinData.prototype.hasCoinToSell = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional Coin coin_to_buy = 2;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.SellAllCoinData.prototype.getCoinToBuy = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 2));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.SellAllCoinData} returns this
*/
proto.api_pb.SellAllCoinData.prototype.setCoinToBuy = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.SellAllCoinData} returns this
 */
proto.api_pb.SellAllCoinData.prototype.clearCoinToBuy = function () {
    return this.setCoinToBuy(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.SellAllCoinData.prototype.hasCoinToBuy = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string minimum_value_to_buy = 3;
 * @return {string}
 */
proto.api_pb.SellAllCoinData.prototype.getMinimumValueToBuy = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SellAllCoinData} returns this
 */
proto.api_pb.SellAllCoinData.prototype.setMinimumValueToBuy = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.BuyCoinData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.BuyCoinData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.BuyCoinData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.BuyCoinData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coinToBuy: (f = msg.getCoinToBuy()) && resources_pb.Coin.toObject(includeInstance, f),
            valueToBuy: jspb.Message.getFieldWithDefault(msg, 2, ""),
            coinToSell: (f = msg.getCoinToSell()) && resources_pb.Coin.toObject(includeInstance, f),
            maximumValueToSell: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.BuyCoinData}
 */
proto.api_pb.BuyCoinData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.BuyCoinData;
    return proto.api_pb.BuyCoinData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.BuyCoinData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.BuyCoinData}
 */
proto.api_pb.BuyCoinData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoinToBuy(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValueToBuy(value);
                break;
            case 3:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoinToSell(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setMaximumValueToSell(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.BuyCoinData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.BuyCoinData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.BuyCoinData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.BuyCoinData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoinToBuy();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValueToBuy();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getCoinToSell();
    if (f != null) {
        writer.writeMessage(3, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getMaximumValueToSell();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional Coin coin_to_buy = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.BuyCoinData.prototype.getCoinToBuy = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.BuyCoinData} returns this
*/
proto.api_pb.BuyCoinData.prototype.setCoinToBuy = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.BuyCoinData} returns this
 */
proto.api_pb.BuyCoinData.prototype.clearCoinToBuy = function () {
    return this.setCoinToBuy(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.BuyCoinData.prototype.hasCoinToBuy = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string value_to_buy = 2;
 * @return {string}
 */
proto.api_pb.BuyCoinData.prototype.getValueToBuy = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.BuyCoinData} returns this
 */
proto.api_pb.BuyCoinData.prototype.setValueToBuy = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional Coin coin_to_sell = 3;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.BuyCoinData.prototype.getCoinToSell = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 3));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.BuyCoinData} returns this
*/
proto.api_pb.BuyCoinData.prototype.setCoinToSell = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.BuyCoinData} returns this
 */
proto.api_pb.BuyCoinData.prototype.clearCoinToSell = function () {
    return this.setCoinToSell(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.BuyCoinData.prototype.hasCoinToSell = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional string maximum_value_to_sell = 4;
 * @return {string}
 */
proto.api_pb.BuyCoinData.prototype.getMaximumValueToSell = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.BuyCoinData} returns this
 */
proto.api_pb.BuyCoinData.prototype.setMaximumValueToSell = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.CreateCoinData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.CreateCoinData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.CreateCoinData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.CreateCoinData.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
            initialAmount: jspb.Message.getFieldWithDefault(msg, 3, ""),
            initialReserve: jspb.Message.getFieldWithDefault(msg, 4, ""),
            constantReserveRatio: jspb.Message.getFieldWithDefault(msg, 5, 0),
            maxSupply: jspb.Message.getFieldWithDefault(msg, 6, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.CreateCoinData}
 */
proto.api_pb.CreateCoinData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.CreateCoinData;
    return proto.api_pb.CreateCoinData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.CreateCoinData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.CreateCoinData}
 */
proto.api_pb.CreateCoinData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setSymbol(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setInitialAmount(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setInitialReserve(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setConstantReserveRatio(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setMaxSupply(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.CreateCoinData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.CreateCoinData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.CreateCoinData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.CreateCoinData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getSymbol();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getInitialAmount();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getInitialReserve();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getConstantReserveRatio();
    if (f !== 0) {
        writer.writeUint64(5, f);
    }
    f = message.getMaxSupply();
    if (f.length > 0) {
        writer.writeString(6, f);
    }
};
/**
 * optional string name = 1;
 * @return {string}
 */
proto.api_pb.CreateCoinData.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateCoinData} returns this
 */
proto.api_pb.CreateCoinData.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.api_pb.CreateCoinData.prototype.getSymbol = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateCoinData} returns this
 */
proto.api_pb.CreateCoinData.prototype.setSymbol = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string initial_amount = 3;
 * @return {string}
 */
proto.api_pb.CreateCoinData.prototype.getInitialAmount = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateCoinData} returns this
 */
proto.api_pb.CreateCoinData.prototype.setInitialAmount = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string initial_reserve = 4;
 * @return {string}
 */
proto.api_pb.CreateCoinData.prototype.getInitialReserve = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateCoinData} returns this
 */
proto.api_pb.CreateCoinData.prototype.setInitialReserve = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional uint64 constant_reserve_ratio = 5;
 * @return {number}
 */
proto.api_pb.CreateCoinData.prototype.getConstantReserveRatio = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.CreateCoinData} returns this
 */
proto.api_pb.CreateCoinData.prototype.setConstantReserveRatio = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional string max_supply = 6;
 * @return {string}
 */
proto.api_pb.CreateCoinData.prototype.getMaxSupply = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateCoinData} returns this
 */
proto.api_pb.CreateCoinData.prototype.setMaxSupply = function (value) {
    return jspb.Message.setProto3StringField(this, 6, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.DeclareCandidacyData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.DeclareCandidacyData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.DeclareCandidacyData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.DeclareCandidacyData.toObject = function (includeInstance, msg) {
        var f, obj = {
            address: jspb.Message.getFieldWithDefault(msg, 1, ""),
            pubKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
            commission: jspb.Message.getFieldWithDefault(msg, 3, 0),
            coin: (f = msg.getCoin()) && resources_pb.Coin.toObject(includeInstance, f),
            stake: jspb.Message.getFieldWithDefault(msg, 5, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.DeclareCandidacyData}
 */
proto.api_pb.DeclareCandidacyData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.DeclareCandidacyData;
    return proto.api_pb.DeclareCandidacyData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.DeclareCandidacyData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.DeclareCandidacyData}
 */
proto.api_pb.DeclareCandidacyData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddress(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setCommission(value);
                break;
            case 4:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setStake(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.DeclareCandidacyData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.DeclareCandidacyData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.DeclareCandidacyData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.DeclareCandidacyData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddress();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getCommission();
    if (f !== 0) {
        writer.writeUint64(3, f);
    }
    f = message.getCoin();
    if (f != null) {
        writer.writeMessage(4, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getStake();
    if (f.length > 0) {
        writer.writeString(5, f);
    }
};
/**
 * optional string address = 1;
 * @return {string}
 */
proto.api_pb.DeclareCandidacyData.prototype.getAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.DeclareCandidacyData} returns this
 */
proto.api_pb.DeclareCandidacyData.prototype.setAddress = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string pub_key = 2;
 * @return {string}
 */
proto.api_pb.DeclareCandidacyData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.DeclareCandidacyData} returns this
 */
proto.api_pb.DeclareCandidacyData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional uint64 commission = 3;
 * @return {number}
 */
proto.api_pb.DeclareCandidacyData.prototype.getCommission = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.DeclareCandidacyData} returns this
 */
proto.api_pb.DeclareCandidacyData.prototype.setCommission = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional Coin coin = 4;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.DeclareCandidacyData.prototype.getCoin = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 4));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.DeclareCandidacyData} returns this
*/
proto.api_pb.DeclareCandidacyData.prototype.setCoin = function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.DeclareCandidacyData} returns this
 */
proto.api_pb.DeclareCandidacyData.prototype.clearCoin = function () {
    return this.setCoin(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.DeclareCandidacyData.prototype.hasCoin = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional string stake = 5;
 * @return {string}
 */
proto.api_pb.DeclareCandidacyData.prototype.getStake = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.DeclareCandidacyData} returns this
 */
proto.api_pb.DeclareCandidacyData.prototype.setStake = function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.DelegateData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.DelegateData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.DelegateData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.DelegateData.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            coin: (f = msg.getCoin()) && resources_pb.Coin.toObject(includeInstance, f),
            value: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.DelegateData}
 */
proto.api_pb.DelegateData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.DelegateData;
    return proto.api_pb.DelegateData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.DelegateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.DelegateData}
 */
proto.api_pb.DelegateData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            case 2:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.DelegateData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.DelegateData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.DelegateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.DelegateData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getCoin();
    if (f != null) {
        writer.writeMessage(2, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.DelegateData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.DelegateData} returns this
 */
proto.api_pb.DelegateData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional Coin coin = 2;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.DelegateData.prototype.getCoin = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 2));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.DelegateData} returns this
*/
proto.api_pb.DelegateData.prototype.setCoin = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.DelegateData} returns this
 */
proto.api_pb.DelegateData.prototype.clearCoin = function () {
    return this.setCoin(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.DelegateData.prototype.hasCoin = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.api_pb.DelegateData.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.DelegateData} returns this
 */
proto.api_pb.DelegateData.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.UnbondData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.UnbondData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.UnbondData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.UnbondData.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            coin: (f = msg.getCoin()) && resources_pb.Coin.toObject(includeInstance, f),
            value: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.UnbondData}
 */
proto.api_pb.UnbondData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.UnbondData;
    return proto.api_pb.UnbondData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.UnbondData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.UnbondData}
 */
proto.api_pb.UnbondData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            case 2:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.UnbondData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.UnbondData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.UnbondData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.UnbondData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getCoin();
    if (f != null) {
        writer.writeMessage(2, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.UnbondData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.UnbondData} returns this
 */
proto.api_pb.UnbondData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional Coin coin = 2;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.UnbondData.prototype.getCoin = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 2));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.UnbondData} returns this
*/
proto.api_pb.UnbondData.prototype.setCoin = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.UnbondData} returns this
 */
proto.api_pb.UnbondData.prototype.clearCoin = function () {
    return this.setCoin(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.UnbondData.prototype.hasCoin = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.api_pb.UnbondData.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.UnbondData} returns this
 */
proto.api_pb.UnbondData.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.RedeemCheckData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.RedeemCheckData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.RedeemCheckData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.RedeemCheckData.toObject = function (includeInstance, msg) {
        var f, obj = {
            rawCheck: jspb.Message.getFieldWithDefault(msg, 1, ""),
            proof: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.RedeemCheckData}
 */
proto.api_pb.RedeemCheckData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.RedeemCheckData;
    return proto.api_pb.RedeemCheckData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.RedeemCheckData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.RedeemCheckData}
 */
proto.api_pb.RedeemCheckData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setRawCheck(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setProof(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.RedeemCheckData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.RedeemCheckData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.RedeemCheckData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.RedeemCheckData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getRawCheck();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getProof();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string raw_check = 1;
 * @return {string}
 */
proto.api_pb.RedeemCheckData.prototype.getRawCheck = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RedeemCheckData} returns this
 */
proto.api_pb.RedeemCheckData.prototype.setRawCheck = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string proof = 2;
 * @return {string}
 */
proto.api_pb.RedeemCheckData.prototype.getProof = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RedeemCheckData} returns this
 */
proto.api_pb.RedeemCheckData.prototype.setProof = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.SetCandidateOnData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.SetCandidateOnData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.SetCandidateOnData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.SetCandidateOnData.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.SetCandidateOnData}
 */
proto.api_pb.SetCandidateOnData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.SetCandidateOnData;
    return proto.api_pb.SetCandidateOnData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.SetCandidateOnData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.SetCandidateOnData}
 */
proto.api_pb.SetCandidateOnData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.SetCandidateOnData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.SetCandidateOnData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.SetCandidateOnData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.SetCandidateOnData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.SetCandidateOnData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SetCandidateOnData} returns this
 */
proto.api_pb.SetCandidateOnData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.SetCandidateOffData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.SetCandidateOffData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.SetCandidateOffData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.SetCandidateOffData.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.SetCandidateOffData}
 */
proto.api_pb.SetCandidateOffData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.SetCandidateOffData;
    return proto.api_pb.SetCandidateOffData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.SetCandidateOffData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.SetCandidateOffData}
 */
proto.api_pb.SetCandidateOffData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.SetCandidateOffData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.SetCandidateOffData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.SetCandidateOffData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.SetCandidateOffData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.SetCandidateOffData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SetCandidateOffData} returns this
 */
proto.api_pb.SetCandidateOffData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api_pb.CreateMultisigData.repeatedFields_ = [2, 3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.CreateMultisigData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.CreateMultisigData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.CreateMultisigData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.CreateMultisigData.toObject = function (includeInstance, msg) {
        var f, obj = {
            threshold: jspb.Message.getFieldWithDefault(msg, 1, 0),
            weightsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
            addressesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.CreateMultisigData}
 */
proto.api_pb.CreateMultisigData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.CreateMultisigData;
    return proto.api_pb.CreateMultisigData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.CreateMultisigData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.CreateMultisigData}
 */
proto.api_pb.CreateMultisigData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setThreshold(value);
                break;
            case 2:
                var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
                for (var i = 0; i < values.length; i++) {
                    msg.addWeights(values[i]);
                }
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.addAddresses(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.CreateMultisigData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.CreateMultisigData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.CreateMultisigData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.CreateMultisigData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreshold();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getWeightsList();
    if (f.length > 0) {
        writer.writePackedUint64(2, f);
    }
    f = message.getAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(3, f);
    }
};
/**
 * optional uint64 threshold = 1;
 * @return {number}
 */
proto.api_pb.CreateMultisigData.prototype.getThreshold = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.CreateMultisigData} returns this
 */
proto.api_pb.CreateMultisigData.prototype.setThreshold = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * repeated uint64 weights = 2;
 * @return {!Array<number>}
 */
proto.api_pb.CreateMultisigData.prototype.getWeightsList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};
/**
 * @param {!Array<number>} value
 * @return {!proto.api_pb.CreateMultisigData} returns this
 */
proto.api_pb.CreateMultisigData.prototype.setWeightsList = function (value) {
    return jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.api_pb.CreateMultisigData} returns this
 */
proto.api_pb.CreateMultisigData.prototype.addWeights = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api_pb.CreateMultisigData} returns this
 */
proto.api_pb.CreateMultisigData.prototype.clearWeightsList = function () {
    return this.setWeightsList([]);
};
/**
 * repeated string addresses = 3;
 * @return {!Array<string>}
 */
proto.api_pb.CreateMultisigData.prototype.getAddressesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.api_pb.CreateMultisigData} returns this
 */
proto.api_pb.CreateMultisigData.prototype.setAddressesList = function (value) {
    return jspb.Message.setField(this, 3, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api_pb.CreateMultisigData} returns this
 */
proto.api_pb.CreateMultisigData.prototype.addAddresses = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api_pb.CreateMultisigData} returns this
 */
proto.api_pb.CreateMultisigData.prototype.clearAddressesList = function () {
    return this.setAddressesList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api_pb.MultiSendData.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.MultiSendData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.MultiSendData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.MultiSendData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.MultiSendData.toObject = function (includeInstance, msg) {
        var f, obj = {
            listList: jspb.Message.toObjectList(msg.getListList(), proto.api_pb.SendData.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.MultiSendData}
 */
proto.api_pb.MultiSendData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.MultiSendData;
    return proto.api_pb.MultiSendData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.MultiSendData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.MultiSendData}
 */
proto.api_pb.MultiSendData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.api_pb.SendData;
                reader.readMessage(value, proto.api_pb.SendData.deserializeBinaryFromReader);
                msg.addList(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.MultiSendData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.MultiSendData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.MultiSendData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.MultiSendData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getListList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.api_pb.SendData.serializeBinaryToWriter);
    }
};
/**
 * repeated SendData list = 1;
 * @return {!Array<!proto.api_pb.SendData>}
 */
proto.api_pb.MultiSendData.prototype.getListList = function () {
    return /** @type{!Array<!proto.api_pb.SendData>} */ (jspb.Message.getRepeatedWrapperField(this, proto.api_pb.SendData, 1));
};
/**
 * @param {!Array<!proto.api_pb.SendData>} value
 * @return {!proto.api_pb.MultiSendData} returns this
*/
proto.api_pb.MultiSendData.prototype.setListList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.api_pb.SendData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api_pb.SendData}
 */
proto.api_pb.MultiSendData.prototype.addList = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api_pb.SendData, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api_pb.MultiSendData} returns this
 */
proto.api_pb.MultiSendData.prototype.clearListList = function () {
    return this.setListList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.EditCandidateData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.EditCandidateData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.EditCandidateData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.EditCandidateData.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            rewardAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
            ownerAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
            controlAddress: jspb.Message.getFieldWithDefault(msg, 5, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.EditCandidateData}
 */
proto.api_pb.EditCandidateData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.EditCandidateData;
    return proto.api_pb.EditCandidateData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.EditCandidateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.EditCandidateData}
 */
proto.api_pb.EditCandidateData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setRewardAddress(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setOwnerAddress(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setControlAddress(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.EditCandidateData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.EditCandidateData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.EditCandidateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.EditCandidateData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getRewardAddress();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getOwnerAddress();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getControlAddress();
    if (f.length > 0) {
        writer.writeString(5, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.EditCandidateData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.EditCandidateData} returns this
 */
proto.api_pb.EditCandidateData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string reward_address = 3;
 * @return {string}
 */
proto.api_pb.EditCandidateData.prototype.getRewardAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.EditCandidateData} returns this
 */
proto.api_pb.EditCandidateData.prototype.setRewardAddress = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string owner_address = 4;
 * @return {string}
 */
proto.api_pb.EditCandidateData.prototype.getOwnerAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.EditCandidateData} returns this
 */
proto.api_pb.EditCandidateData.prototype.setOwnerAddress = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string control_address = 5;
 * @return {string}
 */
proto.api_pb.EditCandidateData.prototype.getControlAddress = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.EditCandidateData} returns this
 */
proto.api_pb.EditCandidateData.prototype.setControlAddress = function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.SetHaltBlockData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.SetHaltBlockData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.SetHaltBlockData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.SetHaltBlockData.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            height: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.SetHaltBlockData}
 */
proto.api_pb.SetHaltBlockData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.SetHaltBlockData;
    return proto.api_pb.SetHaltBlockData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.SetHaltBlockData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.SetHaltBlockData}
 */
proto.api_pb.SetHaltBlockData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setHeight(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.SetHaltBlockData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.SetHaltBlockData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.SetHaltBlockData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.SetHaltBlockData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getHeight();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.SetHaltBlockData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SetHaltBlockData} returns this
 */
proto.api_pb.SetHaltBlockData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.api_pb.SetHaltBlockData.prototype.getHeight = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.SetHaltBlockData} returns this
 */
proto.api_pb.SetHaltBlockData.prototype.setHeight = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.RecreateCoinData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.RecreateCoinData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.RecreateCoinData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.RecreateCoinData.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
            initialAmount: jspb.Message.getFieldWithDefault(msg, 3, ""),
            initialReserve: jspb.Message.getFieldWithDefault(msg, 4, ""),
            constantReserveRatio: jspb.Message.getFieldWithDefault(msg, 5, 0),
            maxSupply: jspb.Message.getFieldWithDefault(msg, 6, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.RecreateCoinData}
 */
proto.api_pb.RecreateCoinData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.RecreateCoinData;
    return proto.api_pb.RecreateCoinData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.RecreateCoinData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.RecreateCoinData}
 */
proto.api_pb.RecreateCoinData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setSymbol(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setInitialAmount(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setInitialReserve(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setConstantReserveRatio(value);
                break;
            case 6:
                var value = /** @type {string} */ (reader.readString());
                msg.setMaxSupply(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.RecreateCoinData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.RecreateCoinData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.RecreateCoinData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.RecreateCoinData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getSymbol();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getInitialAmount();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getInitialReserve();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getConstantReserveRatio();
    if (f !== 0) {
        writer.writeUint64(5, f);
    }
    f = message.getMaxSupply();
    if (f.length > 0) {
        writer.writeString(6, f);
    }
};
/**
 * optional string name = 1;
 * @return {string}
 */
proto.api_pb.RecreateCoinData.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RecreateCoinData} returns this
 */
proto.api_pb.RecreateCoinData.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.api_pb.RecreateCoinData.prototype.getSymbol = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RecreateCoinData} returns this
 */
proto.api_pb.RecreateCoinData.prototype.setSymbol = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string initial_amount = 3;
 * @return {string}
 */
proto.api_pb.RecreateCoinData.prototype.getInitialAmount = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RecreateCoinData} returns this
 */
proto.api_pb.RecreateCoinData.prototype.setInitialAmount = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string initial_reserve = 4;
 * @return {string}
 */
proto.api_pb.RecreateCoinData.prototype.getInitialReserve = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RecreateCoinData} returns this
 */
proto.api_pb.RecreateCoinData.prototype.setInitialReserve = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional uint64 constant_reserve_ratio = 5;
 * @return {number}
 */
proto.api_pb.RecreateCoinData.prototype.getConstantReserveRatio = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.RecreateCoinData} returns this
 */
proto.api_pb.RecreateCoinData.prototype.setConstantReserveRatio = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional string max_supply = 6;
 * @return {string}
 */
proto.api_pb.RecreateCoinData.prototype.getMaxSupply = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RecreateCoinData} returns this
 */
proto.api_pb.RecreateCoinData.prototype.setMaxSupply = function (value) {
    return jspb.Message.setProto3StringField(this, 6, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.EditCoinOwnerData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.EditCoinOwnerData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.EditCoinOwnerData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.EditCoinOwnerData.toObject = function (includeInstance, msg) {
        var f, obj = {
            symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
            newOwner: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.EditCoinOwnerData}
 */
proto.api_pb.EditCoinOwnerData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.EditCoinOwnerData;
    return proto.api_pb.EditCoinOwnerData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.EditCoinOwnerData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.EditCoinOwnerData}
 */
proto.api_pb.EditCoinOwnerData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setSymbol(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setNewOwner(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.EditCoinOwnerData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.EditCoinOwnerData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.EditCoinOwnerData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.EditCoinOwnerData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSymbol();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getNewOwner();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.api_pb.EditCoinOwnerData.prototype.getSymbol = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.EditCoinOwnerData} returns this
 */
proto.api_pb.EditCoinOwnerData.prototype.setSymbol = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string new_owner = 2;
 * @return {string}
 */
proto.api_pb.EditCoinOwnerData.prototype.getNewOwner = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.EditCoinOwnerData} returns this
 */
proto.api_pb.EditCoinOwnerData.prototype.setNewOwner = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api_pb.EditMultisigData.repeatedFields_ = [2, 3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.EditMultisigData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.EditMultisigData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.EditMultisigData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.EditMultisigData.toObject = function (includeInstance, msg) {
        var f, obj = {
            threshold: jspb.Message.getFieldWithDefault(msg, 1, 0),
            weightsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
            addressesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.EditMultisigData}
 */
proto.api_pb.EditMultisigData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.EditMultisigData;
    return proto.api_pb.EditMultisigData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.EditMultisigData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.EditMultisigData}
 */
proto.api_pb.EditMultisigData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setThreshold(value);
                break;
            case 2:
                var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
                for (var i = 0; i < values.length; i++) {
                    msg.addWeights(values[i]);
                }
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.addAddresses(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.EditMultisigData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.EditMultisigData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.EditMultisigData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.EditMultisigData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getThreshold();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getWeightsList();
    if (f.length > 0) {
        writer.writePackedUint64(2, f);
    }
    f = message.getAddressesList();
    if (f.length > 0) {
        writer.writeRepeatedString(3, f);
    }
};
/**
 * optional uint64 threshold = 1;
 * @return {number}
 */
proto.api_pb.EditMultisigData.prototype.getThreshold = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.EditMultisigData} returns this
 */
proto.api_pb.EditMultisigData.prototype.setThreshold = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * repeated uint64 weights = 2;
 * @return {!Array<number>}
 */
proto.api_pb.EditMultisigData.prototype.getWeightsList = function () {
    return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};
/**
 * @param {!Array<number>} value
 * @return {!proto.api_pb.EditMultisigData} returns this
 */
proto.api_pb.EditMultisigData.prototype.setWeightsList = function (value) {
    return jspb.Message.setField(this, 2, value || []);
};
/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.api_pb.EditMultisigData} returns this
 */
proto.api_pb.EditMultisigData.prototype.addWeights = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api_pb.EditMultisigData} returns this
 */
proto.api_pb.EditMultisigData.prototype.clearWeightsList = function () {
    return this.setWeightsList([]);
};
/**
 * repeated string addresses = 3;
 * @return {!Array<string>}
 */
proto.api_pb.EditMultisigData.prototype.getAddressesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.api_pb.EditMultisigData} returns this
 */
proto.api_pb.EditMultisigData.prototype.setAddressesList = function (value) {
    return jspb.Message.setField(this, 3, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.api_pb.EditMultisigData} returns this
 */
proto.api_pb.EditMultisigData.prototype.addAddresses = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api_pb.EditMultisigData} returns this
 */
proto.api_pb.EditMultisigData.prototype.clearAddressesList = function () {
    return this.setAddressesList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.EditCandidatePublicKeyData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.EditCandidatePublicKeyData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.EditCandidatePublicKeyData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.EditCandidatePublicKeyData.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            newPubKey: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.EditCandidatePublicKeyData}
 */
proto.api_pb.EditCandidatePublicKeyData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.EditCandidatePublicKeyData;
    return proto.api_pb.EditCandidatePublicKeyData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.EditCandidatePublicKeyData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.EditCandidatePublicKeyData}
 */
proto.api_pb.EditCandidatePublicKeyData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setNewPubKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.EditCandidatePublicKeyData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.EditCandidatePublicKeyData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.EditCandidatePublicKeyData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.EditCandidatePublicKeyData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getNewPubKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.EditCandidatePublicKeyData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.EditCandidatePublicKeyData} returns this
 */
proto.api_pb.EditCandidatePublicKeyData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string new_pub_key = 2;
 * @return {string}
 */
proto.api_pb.EditCandidatePublicKeyData.prototype.getNewPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.EditCandidatePublicKeyData} returns this
 */
proto.api_pb.EditCandidatePublicKeyData.prototype.setNewPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.CreateSwapPoolData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.CreateSwapPoolData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.CreateSwapPoolData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.CreateSwapPoolData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coin0: (f = msg.getCoin0()) && resources_pb.Coin.toObject(includeInstance, f),
            coin1: (f = msg.getCoin1()) && resources_pb.Coin.toObject(includeInstance, f),
            volume0: jspb.Message.getFieldWithDefault(msg, 3, ""),
            volume1: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.CreateSwapPoolData}
 */
proto.api_pb.CreateSwapPoolData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.CreateSwapPoolData;
    return proto.api_pb.CreateSwapPoolData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.CreateSwapPoolData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.CreateSwapPoolData}
 */
proto.api_pb.CreateSwapPoolData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin0(value);
                break;
            case 2:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin1(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setVolume0(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setVolume1(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.CreateSwapPoolData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.CreateSwapPoolData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.CreateSwapPoolData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.CreateSwapPoolData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoin0();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getCoin1();
    if (f != null) {
        writer.writeMessage(2, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getVolume0();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getVolume1();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional Coin coin0 = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.CreateSwapPoolData.prototype.getCoin0 = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.CreateSwapPoolData} returns this
*/
proto.api_pb.CreateSwapPoolData.prototype.setCoin0 = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.CreateSwapPoolData} returns this
 */
proto.api_pb.CreateSwapPoolData.prototype.clearCoin0 = function () {
    return this.setCoin0(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.CreateSwapPoolData.prototype.hasCoin0 = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional Coin coin1 = 2;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.CreateSwapPoolData.prototype.getCoin1 = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 2));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.CreateSwapPoolData} returns this
*/
proto.api_pb.CreateSwapPoolData.prototype.setCoin1 = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.CreateSwapPoolData} returns this
 */
proto.api_pb.CreateSwapPoolData.prototype.clearCoin1 = function () {
    return this.setCoin1(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.CreateSwapPoolData.prototype.hasCoin1 = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string volume0 = 3;
 * @return {string}
 */
proto.api_pb.CreateSwapPoolData.prototype.getVolume0 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateSwapPoolData} returns this
 */
proto.api_pb.CreateSwapPoolData.prototype.setVolume0 = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string volume1 = 4;
 * @return {string}
 */
proto.api_pb.CreateSwapPoolData.prototype.getVolume1 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateSwapPoolData} returns this
 */
proto.api_pb.CreateSwapPoolData.prototype.setVolume1 = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.AddLiquidityData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.AddLiquidityData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.AddLiquidityData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.AddLiquidityData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coin0: (f = msg.getCoin0()) && resources_pb.Coin.toObject(includeInstance, f),
            coin1: (f = msg.getCoin1()) && resources_pb.Coin.toObject(includeInstance, f),
            volume0: jspb.Message.getFieldWithDefault(msg, 3, ""),
            maximumVolume1: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.AddLiquidityData}
 */
proto.api_pb.AddLiquidityData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.AddLiquidityData;
    return proto.api_pb.AddLiquidityData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.AddLiquidityData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.AddLiquidityData}
 */
proto.api_pb.AddLiquidityData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin0(value);
                break;
            case 2:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin1(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setVolume0(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setMaximumVolume1(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.AddLiquidityData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.AddLiquidityData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.AddLiquidityData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.AddLiquidityData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoin0();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getCoin1();
    if (f != null) {
        writer.writeMessage(2, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getVolume0();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getMaximumVolume1();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional Coin coin0 = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.AddLiquidityData.prototype.getCoin0 = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.AddLiquidityData} returns this
*/
proto.api_pb.AddLiquidityData.prototype.setCoin0 = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.AddLiquidityData} returns this
 */
proto.api_pb.AddLiquidityData.prototype.clearCoin0 = function () {
    return this.setCoin0(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.AddLiquidityData.prototype.hasCoin0 = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional Coin coin1 = 2;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.AddLiquidityData.prototype.getCoin1 = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 2));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.AddLiquidityData} returns this
*/
proto.api_pb.AddLiquidityData.prototype.setCoin1 = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.AddLiquidityData} returns this
 */
proto.api_pb.AddLiquidityData.prototype.clearCoin1 = function () {
    return this.setCoin1(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.AddLiquidityData.prototype.hasCoin1 = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string volume0 = 3;
 * @return {string}
 */
proto.api_pb.AddLiquidityData.prototype.getVolume0 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.AddLiquidityData} returns this
 */
proto.api_pb.AddLiquidityData.prototype.setVolume0 = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string maximum_volume1 = 4;
 * @return {string}
 */
proto.api_pb.AddLiquidityData.prototype.getMaximumVolume1 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.AddLiquidityData} returns this
 */
proto.api_pb.AddLiquidityData.prototype.setMaximumVolume1 = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.RemoveLiquidityData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.RemoveLiquidityData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.RemoveLiquidityData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.RemoveLiquidityData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coin0: (f = msg.getCoin0()) && resources_pb.Coin.toObject(includeInstance, f),
            coin1: (f = msg.getCoin1()) && resources_pb.Coin.toObject(includeInstance, f),
            liquidity: jspb.Message.getFieldWithDefault(msg, 3, ""),
            minimumVolume0: jspb.Message.getFieldWithDefault(msg, 4, ""),
            minimumVolume1: jspb.Message.getFieldWithDefault(msg, 5, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.RemoveLiquidityData}
 */
proto.api_pb.RemoveLiquidityData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.RemoveLiquidityData;
    return proto.api_pb.RemoveLiquidityData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.RemoveLiquidityData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.RemoveLiquidityData}
 */
proto.api_pb.RemoveLiquidityData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin0(value);
                break;
            case 2:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin1(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setLiquidity(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setMinimumVolume0(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setMinimumVolume1(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.RemoveLiquidityData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.RemoveLiquidityData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.RemoveLiquidityData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.RemoveLiquidityData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoin0();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getCoin1();
    if (f != null) {
        writer.writeMessage(2, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getLiquidity();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getMinimumVolume0();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getMinimumVolume1();
    if (f.length > 0) {
        writer.writeString(5, f);
    }
};
/**
 * optional Coin coin0 = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.RemoveLiquidityData.prototype.getCoin0 = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.RemoveLiquidityData} returns this
*/
proto.api_pb.RemoveLiquidityData.prototype.setCoin0 = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.RemoveLiquidityData} returns this
 */
proto.api_pb.RemoveLiquidityData.prototype.clearCoin0 = function () {
    return this.setCoin0(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.RemoveLiquidityData.prototype.hasCoin0 = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional Coin coin1 = 2;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.RemoveLiquidityData.prototype.getCoin1 = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 2));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.RemoveLiquidityData} returns this
*/
proto.api_pb.RemoveLiquidityData.prototype.setCoin1 = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.RemoveLiquidityData} returns this
 */
proto.api_pb.RemoveLiquidityData.prototype.clearCoin1 = function () {
    return this.setCoin1(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.RemoveLiquidityData.prototype.hasCoin1 = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string liquidity = 3;
 * @return {string}
 */
proto.api_pb.RemoveLiquidityData.prototype.getLiquidity = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RemoveLiquidityData} returns this
 */
proto.api_pb.RemoveLiquidityData.prototype.setLiquidity = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string minimum_volume0 = 4;
 * @return {string}
 */
proto.api_pb.RemoveLiquidityData.prototype.getMinimumVolume0 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RemoveLiquidityData} returns this
 */
proto.api_pb.RemoveLiquidityData.prototype.setMinimumVolume0 = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string minimum_volume1 = 5;
 * @return {string}
 */
proto.api_pb.RemoveLiquidityData.prototype.getMinimumVolume1 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RemoveLiquidityData} returns this
 */
proto.api_pb.RemoveLiquidityData.prototype.setMinimumVolume1 = function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api_pb.SellSwapPoolData.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.SellSwapPoolData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.SellSwapPoolData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.SellSwapPoolData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.SellSwapPoolData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coinsList: jspb.Message.toObjectList(msg.getCoinsList(), resources_pb.Coin.toObject, includeInstance),
            valueToSell: jspb.Message.getFieldWithDefault(msg, 2, ""),
            minimumValueToBuy: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.SellSwapPoolData}
 */
proto.api_pb.SellSwapPoolData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.SellSwapPoolData;
    return proto.api_pb.SellSwapPoolData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.SellSwapPoolData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.SellSwapPoolData}
 */
proto.api_pb.SellSwapPoolData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.addCoins(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValueToSell(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setMinimumValueToBuy(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.SellSwapPoolData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.SellSwapPoolData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.SellSwapPoolData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.SellSwapPoolData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoinsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValueToSell();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getMinimumValueToBuy();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * repeated Coin coins = 1;
 * @return {!Array<!proto.api_pb.Coin>}
 */
proto.api_pb.SellSwapPoolData.prototype.getCoinsList = function () {
    return /** @type{!Array<!proto.api_pb.Coin>} */ (jspb.Message.getRepeatedWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {!Array<!proto.api_pb.Coin>} value
 * @return {!proto.api_pb.SellSwapPoolData} returns this
*/
proto.api_pb.SellSwapPoolData.prototype.setCoinsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.api_pb.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api_pb.Coin}
 */
proto.api_pb.SellSwapPoolData.prototype.addCoins = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api_pb.Coin, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api_pb.SellSwapPoolData} returns this
 */
proto.api_pb.SellSwapPoolData.prototype.clearCoinsList = function () {
    return this.setCoinsList([]);
};
/**
 * optional string value_to_sell = 2;
 * @return {string}
 */
proto.api_pb.SellSwapPoolData.prototype.getValueToSell = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SellSwapPoolData} returns this
 */
proto.api_pb.SellSwapPoolData.prototype.setValueToSell = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string minimum_value_to_buy = 4;
 * @return {string}
 */
proto.api_pb.SellSwapPoolData.prototype.getMinimumValueToBuy = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SellSwapPoolData} returns this
 */
proto.api_pb.SellSwapPoolData.prototype.setMinimumValueToBuy = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api_pb.SellAllSwapPoolData.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.SellAllSwapPoolData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.SellAllSwapPoolData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.SellAllSwapPoolData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.SellAllSwapPoolData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coinsList: jspb.Message.toObjectList(msg.getCoinsList(), resources_pb.Coin.toObject, includeInstance),
            minimumValueToBuy: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.SellAllSwapPoolData}
 */
proto.api_pb.SellAllSwapPoolData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.SellAllSwapPoolData;
    return proto.api_pb.SellAllSwapPoolData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.SellAllSwapPoolData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.SellAllSwapPoolData}
 */
proto.api_pb.SellAllSwapPoolData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.addCoins(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setMinimumValueToBuy(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.SellAllSwapPoolData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.SellAllSwapPoolData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.SellAllSwapPoolData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.SellAllSwapPoolData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoinsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getMinimumValueToBuy();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * repeated Coin coins = 1;
 * @return {!Array<!proto.api_pb.Coin>}
 */
proto.api_pb.SellAllSwapPoolData.prototype.getCoinsList = function () {
    return /** @type{!Array<!proto.api_pb.Coin>} */ (jspb.Message.getRepeatedWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {!Array<!proto.api_pb.Coin>} value
 * @return {!proto.api_pb.SellAllSwapPoolData} returns this
*/
proto.api_pb.SellAllSwapPoolData.prototype.setCoinsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.api_pb.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api_pb.Coin}
 */
proto.api_pb.SellAllSwapPoolData.prototype.addCoins = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api_pb.Coin, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api_pb.SellAllSwapPoolData} returns this
 */
proto.api_pb.SellAllSwapPoolData.prototype.clearCoinsList = function () {
    return this.setCoinsList([]);
};
/**
 * optional string minimum_value_to_buy = 3;
 * @return {string}
 */
proto.api_pb.SellAllSwapPoolData.prototype.getMinimumValueToBuy = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.SellAllSwapPoolData} returns this
 */
proto.api_pb.SellAllSwapPoolData.prototype.setMinimumValueToBuy = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api_pb.BuySwapPoolData.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.BuySwapPoolData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.BuySwapPoolData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.BuySwapPoolData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.BuySwapPoolData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coinsList: jspb.Message.toObjectList(msg.getCoinsList(), resources_pb.Coin.toObject, includeInstance),
            valueToBuy: jspb.Message.getFieldWithDefault(msg, 2, ""),
            maximumValueToSell: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.BuySwapPoolData}
 */
proto.api_pb.BuySwapPoolData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.BuySwapPoolData;
    return proto.api_pb.BuySwapPoolData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.BuySwapPoolData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.BuySwapPoolData}
 */
proto.api_pb.BuySwapPoolData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.addCoins(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValueToBuy(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setMaximumValueToSell(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.BuySwapPoolData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.BuySwapPoolData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.BuySwapPoolData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.BuySwapPoolData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoinsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValueToBuy();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getMaximumValueToSell();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * repeated Coin coins = 1;
 * @return {!Array<!proto.api_pb.Coin>}
 */
proto.api_pb.BuySwapPoolData.prototype.getCoinsList = function () {
    return /** @type{!Array<!proto.api_pb.Coin>} */ (jspb.Message.getRepeatedWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {!Array<!proto.api_pb.Coin>} value
 * @return {!proto.api_pb.BuySwapPoolData} returns this
*/
proto.api_pb.BuySwapPoolData.prototype.setCoinsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.api_pb.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api_pb.Coin}
 */
proto.api_pb.BuySwapPoolData.prototype.addCoins = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api_pb.Coin, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api_pb.BuySwapPoolData} returns this
 */
proto.api_pb.BuySwapPoolData.prototype.clearCoinsList = function () {
    return this.setCoinsList([]);
};
/**
 * optional string value_to_buy = 2;
 * @return {string}
 */
proto.api_pb.BuySwapPoolData.prototype.getValueToBuy = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.BuySwapPoolData} returns this
 */
proto.api_pb.BuySwapPoolData.prototype.setValueToBuy = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string maximum_value_to_sell = 4;
 * @return {string}
 */
proto.api_pb.BuySwapPoolData.prototype.getMaximumValueToSell = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.BuySwapPoolData} returns this
 */
proto.api_pb.BuySwapPoolData.prototype.setMaximumValueToSell = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.EditCandidateCommission.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.EditCandidateCommission.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.EditCandidateCommission} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.EditCandidateCommission.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            commission: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.EditCandidateCommission}
 */
proto.api_pb.EditCandidateCommission.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.EditCandidateCommission;
    return proto.api_pb.EditCandidateCommission.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.EditCandidateCommission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.EditCandidateCommission}
 */
proto.api_pb.EditCandidateCommission.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setCommission(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.EditCandidateCommission.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.EditCandidateCommission.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.EditCandidateCommission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.EditCandidateCommission.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getCommission();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.EditCandidateCommission.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.EditCandidateCommission} returns this
 */
proto.api_pb.EditCandidateCommission.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional uint64 commission = 2;
 * @return {number}
 */
proto.api_pb.EditCandidateCommission.prototype.getCommission = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.EditCandidateCommission} returns this
 */
proto.api_pb.EditCandidateCommission.prototype.setCommission = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.MintTokenData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.MintTokenData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.MintTokenData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.MintTokenData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coin: (f = msg.getCoin()) && resources_pb.Coin.toObject(includeInstance, f),
            value: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.MintTokenData}
 */
proto.api_pb.MintTokenData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.MintTokenData;
    return proto.api_pb.MintTokenData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.MintTokenData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.MintTokenData}
 */
proto.api_pb.MintTokenData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.MintTokenData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.MintTokenData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.MintTokenData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.MintTokenData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoin();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional Coin coin = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.MintTokenData.prototype.getCoin = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.MintTokenData} returns this
*/
proto.api_pb.MintTokenData.prototype.setCoin = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.MintTokenData} returns this
 */
proto.api_pb.MintTokenData.prototype.clearCoin = function () {
    return this.setCoin(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.MintTokenData.prototype.hasCoin = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string value = 2;
 * @return {string}
 */
proto.api_pb.MintTokenData.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.MintTokenData} returns this
 */
proto.api_pb.MintTokenData.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.BurnTokenData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.BurnTokenData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.BurnTokenData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.BurnTokenData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coin: (f = msg.getCoin()) && resources_pb.Coin.toObject(includeInstance, f),
            value: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.BurnTokenData}
 */
proto.api_pb.BurnTokenData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.BurnTokenData;
    return proto.api_pb.BurnTokenData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.BurnTokenData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.BurnTokenData}
 */
proto.api_pb.BurnTokenData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.BurnTokenData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.BurnTokenData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.BurnTokenData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.BurnTokenData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoin();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional Coin coin = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.BurnTokenData.prototype.getCoin = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.BurnTokenData} returns this
*/
proto.api_pb.BurnTokenData.prototype.setCoin = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.BurnTokenData} returns this
 */
proto.api_pb.BurnTokenData.prototype.clearCoin = function () {
    return this.setCoin(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.BurnTokenData.prototype.hasCoin = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string value = 2;
 * @return {string}
 */
proto.api_pb.BurnTokenData.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.BurnTokenData} returns this
 */
proto.api_pb.BurnTokenData.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.CreateTokenData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.CreateTokenData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.CreateTokenData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.CreateTokenData.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
            initialAmount: jspb.Message.getFieldWithDefault(msg, 3, ""),
            maxSupply: jspb.Message.getFieldWithDefault(msg, 4, ""),
            mintable: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
            burnable: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.CreateTokenData}
 */
proto.api_pb.CreateTokenData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.CreateTokenData;
    return proto.api_pb.CreateTokenData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.CreateTokenData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.CreateTokenData}
 */
proto.api_pb.CreateTokenData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setSymbol(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setInitialAmount(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setMaxSupply(value);
                break;
            case 5:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setMintable(value);
                break;
            case 6:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setBurnable(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.CreateTokenData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.CreateTokenData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.CreateTokenData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.CreateTokenData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getSymbol();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getInitialAmount();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getMaxSupply();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getMintable();
    if (f) {
        writer.writeBool(5, f);
    }
    f = message.getBurnable();
    if (f) {
        writer.writeBool(6, f);
    }
};
/**
 * optional string name = 1;
 * @return {string}
 */
proto.api_pb.CreateTokenData.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateTokenData} returns this
 */
proto.api_pb.CreateTokenData.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.api_pb.CreateTokenData.prototype.getSymbol = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateTokenData} returns this
 */
proto.api_pb.CreateTokenData.prototype.setSymbol = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string initial_amount = 3;
 * @return {string}
 */
proto.api_pb.CreateTokenData.prototype.getInitialAmount = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateTokenData} returns this
 */
proto.api_pb.CreateTokenData.prototype.setInitialAmount = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string max_supply = 4;
 * @return {string}
 */
proto.api_pb.CreateTokenData.prototype.getMaxSupply = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.CreateTokenData} returns this
 */
proto.api_pb.CreateTokenData.prototype.setMaxSupply = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional bool mintable = 5;
 * @return {boolean}
 */
proto.api_pb.CreateTokenData.prototype.getMintable = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};
/**
 * @param {boolean} value
 * @return {!proto.api_pb.CreateTokenData} returns this
 */
proto.api_pb.CreateTokenData.prototype.setMintable = function (value) {
    return jspb.Message.setProto3BooleanField(this, 5, value);
};
/**
 * optional bool burnable = 6;
 * @return {boolean}
 */
proto.api_pb.CreateTokenData.prototype.getBurnable = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};
/**
 * @param {boolean} value
 * @return {!proto.api_pb.CreateTokenData} returns this
 */
proto.api_pb.CreateTokenData.prototype.setBurnable = function (value) {
    return jspb.Message.setProto3BooleanField(this, 6, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.RecreateTokenData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.RecreateTokenData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.RecreateTokenData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.RecreateTokenData.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
            initialAmount: jspb.Message.getFieldWithDefault(msg, 3, ""),
            maxSupply: jspb.Message.getFieldWithDefault(msg, 4, ""),
            mintable: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
            burnable: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.RecreateTokenData}
 */
proto.api_pb.RecreateTokenData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.RecreateTokenData;
    return proto.api_pb.RecreateTokenData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.RecreateTokenData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.RecreateTokenData}
 */
proto.api_pb.RecreateTokenData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setSymbol(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setInitialAmount(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setMaxSupply(value);
                break;
            case 5:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setMintable(value);
                break;
            case 6:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setBurnable(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.RecreateTokenData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.RecreateTokenData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.RecreateTokenData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.RecreateTokenData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getSymbol();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getInitialAmount();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getMaxSupply();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getMintable();
    if (f) {
        writer.writeBool(5, f);
    }
    f = message.getBurnable();
    if (f) {
        writer.writeBool(6, f);
    }
};
/**
 * optional string name = 1;
 * @return {string}
 */
proto.api_pb.RecreateTokenData.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RecreateTokenData} returns this
 */
proto.api_pb.RecreateTokenData.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.api_pb.RecreateTokenData.prototype.getSymbol = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RecreateTokenData} returns this
 */
proto.api_pb.RecreateTokenData.prototype.setSymbol = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string initial_amount = 3;
 * @return {string}
 */
proto.api_pb.RecreateTokenData.prototype.getInitialAmount = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RecreateTokenData} returns this
 */
proto.api_pb.RecreateTokenData.prototype.setInitialAmount = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string max_supply = 4;
 * @return {string}
 */
proto.api_pb.RecreateTokenData.prototype.getMaxSupply = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.RecreateTokenData} returns this
 */
proto.api_pb.RecreateTokenData.prototype.setMaxSupply = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional bool mintable = 5;
 * @return {boolean}
 */
proto.api_pb.RecreateTokenData.prototype.getMintable = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};
/**
 * @param {boolean} value
 * @return {!proto.api_pb.RecreateTokenData} returns this
 */
proto.api_pb.RecreateTokenData.prototype.setMintable = function (value) {
    return jspb.Message.setProto3BooleanField(this, 5, value);
};
/**
 * optional bool burnable = 6;
 * @return {boolean}
 */
proto.api_pb.RecreateTokenData.prototype.getBurnable = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};
/**
 * @param {boolean} value
 * @return {!proto.api_pb.RecreateTokenData} returns this
 */
proto.api_pb.RecreateTokenData.prototype.setBurnable = function (value) {
    return jspb.Message.setProto3BooleanField(this, 6, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.VoteCommissionData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.VoteCommissionData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.VoteCommissionData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.VoteCommissionData.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            height: jspb.Message.getFieldWithDefault(msg, 2, 0),
            coin: (f = msg.getCoin()) && resources_pb.Coin.toObject(includeInstance, f),
            payloadByte: jspb.Message.getFieldWithDefault(msg, 4, ""),
            send: jspb.Message.getFieldWithDefault(msg, 5, ""),
            buyBancor: jspb.Message.getFieldWithDefault(msg, 38, ""),
            sellBancor: jspb.Message.getFieldWithDefault(msg, 39, ""),
            sellAllBancor: jspb.Message.getFieldWithDefault(msg, 40, ""),
            buyPoolBase: jspb.Message.getFieldWithDefault(msg, 41, ""),
            buyPoolDelta: jspb.Message.getFieldWithDefault(msg, 53, ""),
            sellPoolBase: jspb.Message.getFieldWithDefault(msg, 42, ""),
            sellPoolDelta: jspb.Message.getFieldWithDefault(msg, 54, ""),
            sellAllPoolBase: jspb.Message.getFieldWithDefault(msg, 43, ""),
            sellAllPoolDelta: jspb.Message.getFieldWithDefault(msg, 55, ""),
            createTicker3: jspb.Message.getFieldWithDefault(msg, 7, ""),
            createTicker4: jspb.Message.getFieldWithDefault(msg, 8, ""),
            createTicker5: jspb.Message.getFieldWithDefault(msg, 9, ""),
            createTicker6: jspb.Message.getFieldWithDefault(msg, 10, ""),
            createTicker710: jspb.Message.getFieldWithDefault(msg, 11, ""),
            createCoin: jspb.Message.getFieldWithDefault(msg, 34, ""),
            createToken: jspb.Message.getFieldWithDefault(msg, 35, ""),
            recreateCoin: jspb.Message.getFieldWithDefault(msg, 36, ""),
            recreateToken: jspb.Message.getFieldWithDefault(msg, 37, ""),
            declareCandidacy: jspb.Message.getFieldWithDefault(msg, 13, ""),
            delegate: jspb.Message.getFieldWithDefault(msg, 14, ""),
            unbond: jspb.Message.getFieldWithDefault(msg, 15, ""),
            redeemCheck: jspb.Message.getFieldWithDefault(msg, 16, ""),
            setCandidateOn: jspb.Message.getFieldWithDefault(msg, 44, ""),
            setCandidateOff: jspb.Message.getFieldWithDefault(msg, 45, ""),
            createMultisig: jspb.Message.getFieldWithDefault(msg, 18, ""),
            multisendBase: jspb.Message.getFieldWithDefault(msg, 51, ""),
            multisendDelta: jspb.Message.getFieldWithDefault(msg, 52, ""),
            editCandidate: jspb.Message.getFieldWithDefault(msg, 20, ""),
            setHaltBlock: jspb.Message.getFieldWithDefault(msg, 21, ""),
            editTickerOwner: jspb.Message.getFieldWithDefault(msg, 22, ""),
            editMultisig: jspb.Message.getFieldWithDefault(msg, 23, ""),
            editCandidatePublicKey: jspb.Message.getFieldWithDefault(msg, 25, ""),
            createSwapPool: jspb.Message.getFieldWithDefault(msg, 48, ""),
            addLiquidity: jspb.Message.getFieldWithDefault(msg, 49, ""),
            removeLiquidity: jspb.Message.getFieldWithDefault(msg, 50, ""),
            editCandidateCommission: jspb.Message.getFieldWithDefault(msg, 28, ""),
            mintToken: jspb.Message.getFieldWithDefault(msg, 46, ""),
            burnToken: jspb.Message.getFieldWithDefault(msg, 47, ""),
            voteCommission: jspb.Message.getFieldWithDefault(msg, 31, ""),
            voteUpdate: jspb.Message.getFieldWithDefault(msg, 32, ""),
            failedTx: jspb.Message.getFieldWithDefault(msg, 56, ""),
            addLimitOrder: jspb.Message.getFieldWithDefault(msg, 57, ""),
            removeLimitOrder: jspb.Message.getFieldWithDefault(msg, 58, ""),
            moveStake: jspb.Message.getFieldWithDefault(msg, 59, ""),
            lockStake: jspb.Message.getFieldWithDefault(msg, 60, ""),
            lock: jspb.Message.getFieldWithDefault(msg, 61, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.VoteCommissionData}
 */
proto.api_pb.VoteCommissionData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.VoteCommissionData;
    return proto.api_pb.VoteCommissionData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.VoteCommissionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.VoteCommissionData}
 */
proto.api_pb.VoteCommissionData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setHeight(value);
                break;
            case 3:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setPayloadByte(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setSend(value);
                break;
            case 38:
                var value = /** @type {string} */ (reader.readString());
                msg.setBuyBancor(value);
                break;
            case 39:
                var value = /** @type {string} */ (reader.readString());
                msg.setSellBancor(value);
                break;
            case 40:
                var value = /** @type {string} */ (reader.readString());
                msg.setSellAllBancor(value);
                break;
            case 41:
                var value = /** @type {string} */ (reader.readString());
                msg.setBuyPoolBase(value);
                break;
            case 53:
                var value = /** @type {string} */ (reader.readString());
                msg.setBuyPoolDelta(value);
                break;
            case 42:
                var value = /** @type {string} */ (reader.readString());
                msg.setSellPoolBase(value);
                break;
            case 54:
                var value = /** @type {string} */ (reader.readString());
                msg.setSellPoolDelta(value);
                break;
            case 43:
                var value = /** @type {string} */ (reader.readString());
                msg.setSellAllPoolBase(value);
                break;
            case 55:
                var value = /** @type {string} */ (reader.readString());
                msg.setSellAllPoolDelta(value);
                break;
            case 7:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreateTicker3(value);
                break;
            case 8:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreateTicker4(value);
                break;
            case 9:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreateTicker5(value);
                break;
            case 10:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreateTicker6(value);
                break;
            case 11:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreateTicker710(value);
                break;
            case 34:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreateCoin(value);
                break;
            case 35:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreateToken(value);
                break;
            case 36:
                var value = /** @type {string} */ (reader.readString());
                msg.setRecreateCoin(value);
                break;
            case 37:
                var value = /** @type {string} */ (reader.readString());
                msg.setRecreateToken(value);
                break;
            case 13:
                var value = /** @type {string} */ (reader.readString());
                msg.setDeclareCandidacy(value);
                break;
            case 14:
                var value = /** @type {string} */ (reader.readString());
                msg.setDelegate(value);
                break;
            case 15:
                var value = /** @type {string} */ (reader.readString());
                msg.setUnbond(value);
                break;
            case 16:
                var value = /** @type {string} */ (reader.readString());
                msg.setRedeemCheck(value);
                break;
            case 44:
                var value = /** @type {string} */ (reader.readString());
                msg.setSetCandidateOn(value);
                break;
            case 45:
                var value = /** @type {string} */ (reader.readString());
                msg.setSetCandidateOff(value);
                break;
            case 18:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreateMultisig(value);
                break;
            case 51:
                var value = /** @type {string} */ (reader.readString());
                msg.setMultisendBase(value);
                break;
            case 52:
                var value = /** @type {string} */ (reader.readString());
                msg.setMultisendDelta(value);
                break;
            case 20:
                var value = /** @type {string} */ (reader.readString());
                msg.setEditCandidate(value);
                break;
            case 21:
                var value = /** @type {string} */ (reader.readString());
                msg.setSetHaltBlock(value);
                break;
            case 22:
                var value = /** @type {string} */ (reader.readString());
                msg.setEditTickerOwner(value);
                break;
            case 23:
                var value = /** @type {string} */ (reader.readString());
                msg.setEditMultisig(value);
                break;
            case 25:
                var value = /** @type {string} */ (reader.readString());
                msg.setEditCandidatePublicKey(value);
                break;
            case 48:
                var value = /** @type {string} */ (reader.readString());
                msg.setCreateSwapPool(value);
                break;
            case 49:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddLiquidity(value);
                break;
            case 50:
                var value = /** @type {string} */ (reader.readString());
                msg.setRemoveLiquidity(value);
                break;
            case 28:
                var value = /** @type {string} */ (reader.readString());
                msg.setEditCandidateCommission(value);
                break;
            case 46:
                var value = /** @type {string} */ (reader.readString());
                msg.setMintToken(value);
                break;
            case 47:
                var value = /** @type {string} */ (reader.readString());
                msg.setBurnToken(value);
                break;
            case 31:
                var value = /** @type {string} */ (reader.readString());
                msg.setVoteCommission(value);
                break;
            case 32:
                var value = /** @type {string} */ (reader.readString());
                msg.setVoteUpdate(value);
                break;
            case 56:
                var value = /** @type {string} */ (reader.readString());
                msg.setFailedTx(value);
                break;
            case 57:
                var value = /** @type {string} */ (reader.readString());
                msg.setAddLimitOrder(value);
                break;
            case 58:
                var value = /** @type {string} */ (reader.readString());
                msg.setRemoveLimitOrder(value);
                break;
            case 59:
                var value = /** @type {string} */ (reader.readString());
                msg.setMoveStake(value);
                break;
            case 60:
                var value = /** @type {string} */ (reader.readString());
                msg.setLockStake(value);
                break;
            case 61:
                var value = /** @type {string} */ (reader.readString());
                msg.setLock(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.VoteCommissionData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.VoteCommissionData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.VoteCommissionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.VoteCommissionData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getHeight();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getCoin();
    if (f != null) {
        writer.writeMessage(3, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getPayloadByte();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getSend();
    if (f.length > 0) {
        writer.writeString(5, f);
    }
    f = message.getBuyBancor();
    if (f.length > 0) {
        writer.writeString(38, f);
    }
    f = message.getSellBancor();
    if (f.length > 0) {
        writer.writeString(39, f);
    }
    f = message.getSellAllBancor();
    if (f.length > 0) {
        writer.writeString(40, f);
    }
    f = message.getBuyPoolBase();
    if (f.length > 0) {
        writer.writeString(41, f);
    }
    f = message.getBuyPoolDelta();
    if (f.length > 0) {
        writer.writeString(53, f);
    }
    f = message.getSellPoolBase();
    if (f.length > 0) {
        writer.writeString(42, f);
    }
    f = message.getSellPoolDelta();
    if (f.length > 0) {
        writer.writeString(54, f);
    }
    f = message.getSellAllPoolBase();
    if (f.length > 0) {
        writer.writeString(43, f);
    }
    f = message.getSellAllPoolDelta();
    if (f.length > 0) {
        writer.writeString(55, f);
    }
    f = message.getCreateTicker3();
    if (f.length > 0) {
        writer.writeString(7, f);
    }
    f = message.getCreateTicker4();
    if (f.length > 0) {
        writer.writeString(8, f);
    }
    f = message.getCreateTicker5();
    if (f.length > 0) {
        writer.writeString(9, f);
    }
    f = message.getCreateTicker6();
    if (f.length > 0) {
        writer.writeString(10, f);
    }
    f = message.getCreateTicker710();
    if (f.length > 0) {
        writer.writeString(11, f);
    }
    f = message.getCreateCoin();
    if (f.length > 0) {
        writer.writeString(34, f);
    }
    f = message.getCreateToken();
    if (f.length > 0) {
        writer.writeString(35, f);
    }
    f = message.getRecreateCoin();
    if (f.length > 0) {
        writer.writeString(36, f);
    }
    f = message.getRecreateToken();
    if (f.length > 0) {
        writer.writeString(37, f);
    }
    f = message.getDeclareCandidacy();
    if (f.length > 0) {
        writer.writeString(13, f);
    }
    f = message.getDelegate();
    if (f.length > 0) {
        writer.writeString(14, f);
    }
    f = message.getUnbond();
    if (f.length > 0) {
        writer.writeString(15, f);
    }
    f = message.getRedeemCheck();
    if (f.length > 0) {
        writer.writeString(16, f);
    }
    f = message.getSetCandidateOn();
    if (f.length > 0) {
        writer.writeString(44, f);
    }
    f = message.getSetCandidateOff();
    if (f.length > 0) {
        writer.writeString(45, f);
    }
    f = message.getCreateMultisig();
    if (f.length > 0) {
        writer.writeString(18, f);
    }
    f = message.getMultisendBase();
    if (f.length > 0) {
        writer.writeString(51, f);
    }
    f = message.getMultisendDelta();
    if (f.length > 0) {
        writer.writeString(52, f);
    }
    f = message.getEditCandidate();
    if (f.length > 0) {
        writer.writeString(20, f);
    }
    f = message.getSetHaltBlock();
    if (f.length > 0) {
        writer.writeString(21, f);
    }
    f = message.getEditTickerOwner();
    if (f.length > 0) {
        writer.writeString(22, f);
    }
    f = message.getEditMultisig();
    if (f.length > 0) {
        writer.writeString(23, f);
    }
    f = message.getEditCandidatePublicKey();
    if (f.length > 0) {
        writer.writeString(25, f);
    }
    f = message.getCreateSwapPool();
    if (f.length > 0) {
        writer.writeString(48, f);
    }
    f = message.getAddLiquidity();
    if (f.length > 0) {
        writer.writeString(49, f);
    }
    f = message.getRemoveLiquidity();
    if (f.length > 0) {
        writer.writeString(50, f);
    }
    f = message.getEditCandidateCommission();
    if (f.length > 0) {
        writer.writeString(28, f);
    }
    f = message.getMintToken();
    if (f.length > 0) {
        writer.writeString(46, f);
    }
    f = message.getBurnToken();
    if (f.length > 0) {
        writer.writeString(47, f);
    }
    f = message.getVoteCommission();
    if (f.length > 0) {
        writer.writeString(31, f);
    }
    f = message.getVoteUpdate();
    if (f.length > 0) {
        writer.writeString(32, f);
    }
    f = message.getFailedTx();
    if (f.length > 0) {
        writer.writeString(56, f);
    }
    f = message.getAddLimitOrder();
    if (f.length > 0) {
        writer.writeString(57, f);
    }
    f = message.getRemoveLimitOrder();
    if (f.length > 0) {
        writer.writeString(58, f);
    }
    f = message.getMoveStake();
    if (f.length > 0) {
        writer.writeString(59, f);
    }
    f = message.getLockStake();
    if (f.length > 0) {
        writer.writeString(60, f);
    }
    f = message.getLock();
    if (f.length > 0) {
        writer.writeString(61, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.api_pb.VoteCommissionData.prototype.getHeight = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setHeight = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional Coin coin = 3;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.VoteCommissionData.prototype.getCoin = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 3));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
*/
proto.api_pb.VoteCommissionData.prototype.setCoin = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.clearCoin = function () {
    return this.setCoin(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.VoteCommissionData.prototype.hasCoin = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional string payload_byte = 4;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getPayloadByte = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setPayloadByte = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string send = 5;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSend = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSend = function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * optional string buy_bancor = 38;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getBuyBancor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setBuyBancor = function (value) {
    return jspb.Message.setProto3StringField(this, 38, value);
};
/**
 * optional string sell_bancor = 39;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSellBancor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 39, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSellBancor = function (value) {
    return jspb.Message.setProto3StringField(this, 39, value);
};
/**
 * optional string sell_all_bancor = 40;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSellAllBancor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 40, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSellAllBancor = function (value) {
    return jspb.Message.setProto3StringField(this, 40, value);
};
/**
 * optional string buy_pool_base = 41;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getBuyPoolBase = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setBuyPoolBase = function (value) {
    return jspb.Message.setProto3StringField(this, 41, value);
};
/**
 * optional string buy_pool_delta = 53;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getBuyPoolDelta = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 53, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setBuyPoolDelta = function (value) {
    return jspb.Message.setProto3StringField(this, 53, value);
};
/**
 * optional string sell_pool_base = 42;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSellPoolBase = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 42, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSellPoolBase = function (value) {
    return jspb.Message.setProto3StringField(this, 42, value);
};
/**
 * optional string sell_pool_delta = 54;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSellPoolDelta = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 54, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSellPoolDelta = function (value) {
    return jspb.Message.setProto3StringField(this, 54, value);
};
/**
 * optional string sell_all_pool_base = 43;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSellAllPoolBase = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 43, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSellAllPoolBase = function (value) {
    return jspb.Message.setProto3StringField(this, 43, value);
};
/**
 * optional string sell_all_pool_delta = 55;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSellAllPoolDelta = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 55, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSellAllPoolDelta = function (value) {
    return jspb.Message.setProto3StringField(this, 55, value);
};
/**
 * optional string create_ticker3 = 7;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getCreateTicker3 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setCreateTicker3 = function (value) {
    return jspb.Message.setProto3StringField(this, 7, value);
};
/**
 * optional string create_ticker4 = 8;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getCreateTicker4 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setCreateTicker4 = function (value) {
    return jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional string create_ticker5 = 9;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getCreateTicker5 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setCreateTicker5 = function (value) {
    return jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional string create_ticker6 = 10;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getCreateTicker6 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setCreateTicker6 = function (value) {
    return jspb.Message.setProto3StringField(this, 10, value);
};
/**
 * optional string create_ticker7_10 = 11;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getCreateTicker710 = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setCreateTicker710 = function (value) {
    return jspb.Message.setProto3StringField(this, 11, value);
};
/**
 * optional string create_coin = 34;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getCreateCoin = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setCreateCoin = function (value) {
    return jspb.Message.setProto3StringField(this, 34, value);
};
/**
 * optional string create_token = 35;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getCreateToken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 35, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setCreateToken = function (value) {
    return jspb.Message.setProto3StringField(this, 35, value);
};
/**
 * optional string recreate_coin = 36;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getRecreateCoin = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 36, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setRecreateCoin = function (value) {
    return jspb.Message.setProto3StringField(this, 36, value);
};
/**
 * optional string recreate_token = 37;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getRecreateToken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setRecreateToken = function (value) {
    return jspb.Message.setProto3StringField(this, 37, value);
};
/**
 * optional string declare_candidacy = 13;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getDeclareCandidacy = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setDeclareCandidacy = function (value) {
    return jspb.Message.setProto3StringField(this, 13, value);
};
/**
 * optional string delegate = 14;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getDelegate = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setDelegate = function (value) {
    return jspb.Message.setProto3StringField(this, 14, value);
};
/**
 * optional string unbond = 15;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getUnbond = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setUnbond = function (value) {
    return jspb.Message.setProto3StringField(this, 15, value);
};
/**
 * optional string redeem_check = 16;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getRedeemCheck = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setRedeemCheck = function (value) {
    return jspb.Message.setProto3StringField(this, 16, value);
};
/**
 * optional string set_candidate_on = 44;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSetCandidateOn = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 44, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSetCandidateOn = function (value) {
    return jspb.Message.setProto3StringField(this, 44, value);
};
/**
 * optional string set_candidate_off = 45;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSetCandidateOff = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 45, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSetCandidateOff = function (value) {
    return jspb.Message.setProto3StringField(this, 45, value);
};
/**
 * optional string create_multisig = 18;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getCreateMultisig = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setCreateMultisig = function (value) {
    return jspb.Message.setProto3StringField(this, 18, value);
};
/**
 * optional string multisend_base = 51;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getMultisendBase = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setMultisendBase = function (value) {
    return jspb.Message.setProto3StringField(this, 51, value);
};
/**
 * optional string multisend_delta = 52;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getMultisendDelta = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 52, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setMultisendDelta = function (value) {
    return jspb.Message.setProto3StringField(this, 52, value);
};
/**
 * optional string edit_candidate = 20;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getEditCandidate = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setEditCandidate = function (value) {
    return jspb.Message.setProto3StringField(this, 20, value);
};
/**
 * optional string set_halt_block = 21;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getSetHaltBlock = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setSetHaltBlock = function (value) {
    return jspb.Message.setProto3StringField(this, 21, value);
};
/**
 * optional string edit_ticker_owner = 22;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getEditTickerOwner = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setEditTickerOwner = function (value) {
    return jspb.Message.setProto3StringField(this, 22, value);
};
/**
 * optional string edit_multisig = 23;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getEditMultisig = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setEditMultisig = function (value) {
    return jspb.Message.setProto3StringField(this, 23, value);
};
/**
 * optional string edit_candidate_public_key = 25;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getEditCandidatePublicKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setEditCandidatePublicKey = function (value) {
    return jspb.Message.setProto3StringField(this, 25, value);
};
/**
 * optional string create_swap_pool = 48;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getCreateSwapPool = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 48, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setCreateSwapPool = function (value) {
    return jspb.Message.setProto3StringField(this, 48, value);
};
/**
 * optional string add_liquidity = 49;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getAddLiquidity = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 49, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setAddLiquidity = function (value) {
    return jspb.Message.setProto3StringField(this, 49, value);
};
/**
 * optional string remove_liquidity = 50;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getRemoveLiquidity = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setRemoveLiquidity = function (value) {
    return jspb.Message.setProto3StringField(this, 50, value);
};
/**
 * optional string edit_candidate_commission = 28;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getEditCandidateCommission = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setEditCandidateCommission = function (value) {
    return jspb.Message.setProto3StringField(this, 28, value);
};
/**
 * optional string mint_token = 46;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getMintToken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 46, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setMintToken = function (value) {
    return jspb.Message.setProto3StringField(this, 46, value);
};
/**
 * optional string burn_token = 47;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getBurnToken = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 47, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setBurnToken = function (value) {
    return jspb.Message.setProto3StringField(this, 47, value);
};
/**
 * optional string vote_commission = 31;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getVoteCommission = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setVoteCommission = function (value) {
    return jspb.Message.setProto3StringField(this, 31, value);
};
/**
 * optional string vote_update = 32;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getVoteUpdate = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setVoteUpdate = function (value) {
    return jspb.Message.setProto3StringField(this, 32, value);
};
/**
 * optional string failed_tx = 56;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getFailedTx = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 56, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setFailedTx = function (value) {
    return jspb.Message.setProto3StringField(this, 56, value);
};
/**
 * optional string add_limit_order = 57;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getAddLimitOrder = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 57, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setAddLimitOrder = function (value) {
    return jspb.Message.setProto3StringField(this, 57, value);
};
/**
 * optional string remove_limit_order = 58;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getRemoveLimitOrder = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 58, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setRemoveLimitOrder = function (value) {
    return jspb.Message.setProto3StringField(this, 58, value);
};
/**
 * optional string move_stake = 59;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getMoveStake = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 59, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setMoveStake = function (value) {
    return jspb.Message.setProto3StringField(this, 59, value);
};
/**
 * optional string lock_stake = 60;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getLockStake = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 60, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setLockStake = function (value) {
    return jspb.Message.setProto3StringField(this, 60, value);
};
/**
 * optional string lock = 61;
 * @return {string}
 */
proto.api_pb.VoteCommissionData.prototype.getLock = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 61, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteCommissionData} returns this
 */
proto.api_pb.VoteCommissionData.prototype.setLock = function (value) {
    return jspb.Message.setProto3StringField(this, 61, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.VoteUpdateData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.VoteUpdateData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.VoteUpdateData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.VoteUpdateData.toObject = function (includeInstance, msg) {
        var f, obj = {
            pubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            height: jspb.Message.getFieldWithDefault(msg, 2, 0),
            version: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.VoteUpdateData}
 */
proto.api_pb.VoteUpdateData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.VoteUpdateData;
    return proto.api_pb.VoteUpdateData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.VoteUpdateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.VoteUpdateData}
 */
proto.api_pb.VoteUpdateData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPubKey(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setHeight(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setVersion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.VoteUpdateData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.VoteUpdateData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.VoteUpdateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.VoteUpdateData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getHeight();
    if (f !== 0) {
        writer.writeUint64(2, f);
    }
    f = message.getVersion();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string pub_key = 1;
 * @return {string}
 */
proto.api_pb.VoteUpdateData.prototype.getPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteUpdateData} returns this
 */
proto.api_pb.VoteUpdateData.prototype.setPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.api_pb.VoteUpdateData.prototype.getHeight = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.VoteUpdateData} returns this
 */
proto.api_pb.VoteUpdateData.prototype.setHeight = function (value) {
    return jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional string version = 3;
 * @return {string}
 */
proto.api_pb.VoteUpdateData.prototype.getVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.VoteUpdateData} returns this
 */
proto.api_pb.VoteUpdateData.prototype.setVersion = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.AddLimitOrderData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.AddLimitOrderData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.AddLimitOrderData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.AddLimitOrderData.toObject = function (includeInstance, msg) {
        var f, obj = {
            coinToSell: (f = msg.getCoinToSell()) && resources_pb.Coin.toObject(includeInstance, f),
            valueToSell: jspb.Message.getFieldWithDefault(msg, 2, ""),
            coinToBuy: (f = msg.getCoinToBuy()) && resources_pb.Coin.toObject(includeInstance, f),
            valueToBuy: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.AddLimitOrderData}
 */
proto.api_pb.AddLimitOrderData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.AddLimitOrderData;
    return proto.api_pb.AddLimitOrderData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.AddLimitOrderData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.AddLimitOrderData}
 */
proto.api_pb.AddLimitOrderData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoinToSell(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setValueToSell(value);
                break;
            case 3:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoinToBuy(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setValueToBuy(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.AddLimitOrderData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.AddLimitOrderData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.AddLimitOrderData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.AddLimitOrderData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCoinToSell();
    if (f != null) {
        writer.writeMessage(1, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValueToSell();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getCoinToBuy();
    if (f != null) {
        writer.writeMessage(3, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValueToBuy();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional Coin coin_to_sell = 1;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.AddLimitOrderData.prototype.getCoinToSell = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 1));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.AddLimitOrderData} returns this
*/
proto.api_pb.AddLimitOrderData.prototype.setCoinToSell = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.AddLimitOrderData} returns this
 */
proto.api_pb.AddLimitOrderData.prototype.clearCoinToSell = function () {
    return this.setCoinToSell(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.AddLimitOrderData.prototype.hasCoinToSell = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string value_to_sell = 2;
 * @return {string}
 */
proto.api_pb.AddLimitOrderData.prototype.getValueToSell = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.AddLimitOrderData} returns this
 */
proto.api_pb.AddLimitOrderData.prototype.setValueToSell = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional Coin coin_to_buy = 3;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.AddLimitOrderData.prototype.getCoinToBuy = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 3));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.AddLimitOrderData} returns this
*/
proto.api_pb.AddLimitOrderData.prototype.setCoinToBuy = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.AddLimitOrderData} returns this
 */
proto.api_pb.AddLimitOrderData.prototype.clearCoinToBuy = function () {
    return this.setCoinToBuy(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.AddLimitOrderData.prototype.hasCoinToBuy = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional string value_to_buy = 4;
 * @return {string}
 */
proto.api_pb.AddLimitOrderData.prototype.getValueToBuy = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.AddLimitOrderData} returns this
 */
proto.api_pb.AddLimitOrderData.prototype.setValueToBuy = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.RemoveLimitOrderData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.RemoveLimitOrderData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.RemoveLimitOrderData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.RemoveLimitOrderData.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.RemoveLimitOrderData}
 */
proto.api_pb.RemoveLimitOrderData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.RemoveLimitOrderData;
    return proto.api_pb.RemoveLimitOrderData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.RemoveLimitOrderData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.RemoveLimitOrderData}
 */
proto.api_pb.RemoveLimitOrderData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.RemoveLimitOrderData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.RemoveLimitOrderData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.RemoveLimitOrderData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.RemoveLimitOrderData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
};
/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.api_pb.RemoveLimitOrderData.prototype.getId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.RemoveLimitOrderData} returns this
 */
proto.api_pb.RemoveLimitOrderData.prototype.setId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.MoveStakeData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.MoveStakeData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.MoveStakeData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.MoveStakeData.toObject = function (includeInstance, msg) {
        var f, obj = {
            fromPubKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
            toPubKey: jspb.Message.getFieldWithDefault(msg, 4, ""),
            coin: (f = msg.getCoin()) && resources_pb.Coin.toObject(includeInstance, f),
            value: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.MoveStakeData}
 */
proto.api_pb.MoveStakeData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.MoveStakeData;
    return proto.api_pb.MoveStakeData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.MoveStakeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.MoveStakeData}
 */
proto.api_pb.MoveStakeData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setFromPubKey(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setToPubKey(value);
                break;
            case 2:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.MoveStakeData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.MoveStakeData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.MoveStakeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.MoveStakeData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getFromPubKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getToPubKey();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getCoin();
    if (f != null) {
        writer.writeMessage(2, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string from_pub_key = 1;
 * @return {string}
 */
proto.api_pb.MoveStakeData.prototype.getFromPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.MoveStakeData} returns this
 */
proto.api_pb.MoveStakeData.prototype.setFromPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string to_pub_key = 4;
 * @return {string}
 */
proto.api_pb.MoveStakeData.prototype.getToPubKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.MoveStakeData} returns this
 */
proto.api_pb.MoveStakeData.prototype.setToPubKey = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional Coin coin = 2;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.MoveStakeData.prototype.getCoin = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 2));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.MoveStakeData} returns this
*/
proto.api_pb.MoveStakeData.prototype.setCoin = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.MoveStakeData} returns this
 */
proto.api_pb.MoveStakeData.prototype.clearCoin = function () {
    return this.setCoin(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.MoveStakeData.prototype.hasCoin = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.api_pb.MoveStakeData.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.MoveStakeData} returns this
 */
proto.api_pb.MoveStakeData.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.LockStakeData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.LockStakeData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.LockStakeData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.LockStakeData.toObject = function (includeInstance, msg) {
        var f, obj = {};
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.LockStakeData}
 */
proto.api_pb.LockStakeData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.LockStakeData;
    return proto.api_pb.LockStakeData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.LockStakeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.LockStakeData}
 */
proto.api_pb.LockStakeData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.LockStakeData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.LockStakeData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.LockStakeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.LockStakeData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.api_pb.LockData.prototype.toObject = function (opt_includeInstance) {
        return proto.api_pb.LockData.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.api_pb.LockData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.api_pb.LockData.toObject = function (includeInstance, msg) {
        var f, obj = {
            dueBlock: jspb.Message.getFieldWithDefault(msg, 1, 0),
            coin: (f = msg.getCoin()) && resources_pb.Coin.toObject(includeInstance, f),
            value: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api_pb.LockData}
 */
proto.api_pb.LockData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.api_pb.LockData;
    return proto.api_pb.LockData.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api_pb.LockData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api_pb.LockData}
 */
proto.api_pb.LockData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setDueBlock(value);
                break;
            case 2:
                var value = new resources_pb.Coin;
                reader.readMessage(value, resources_pb.Coin.deserializeBinaryFromReader);
                msg.setCoin(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api_pb.LockData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.api_pb.LockData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api_pb.LockData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api_pb.LockData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getDueBlock();
    if (f !== 0) {
        writer.writeUint64(1, f);
    }
    f = message.getCoin();
    if (f != null) {
        writer.writeMessage(2, f, resources_pb.Coin.serializeBinaryToWriter);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional uint64 due_block = 1;
 * @return {number}
 */
proto.api_pb.LockData.prototype.getDueBlock = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.api_pb.LockData} returns this
 */
proto.api_pb.LockData.prototype.setDueBlock = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional Coin coin = 2;
 * @return {?proto.api_pb.Coin}
 */
proto.api_pb.LockData.prototype.getCoin = function () {
    return /** @type{?proto.api_pb.Coin} */ (jspb.Message.getWrapperField(this, resources_pb.Coin, 2));
};
/**
 * @param {?proto.api_pb.Coin|undefined} value
 * @return {!proto.api_pb.LockData} returns this
*/
proto.api_pb.LockData.prototype.setCoin = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.api_pb.LockData} returns this
 */
proto.api_pb.LockData.prototype.clearCoin = function () {
    return this.setCoin(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api_pb.LockData.prototype.hasCoin = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.api_pb.LockData.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.api_pb.LockData} returns this
 */
proto.api_pb.LockData.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
goog.object.extend(exports, proto.api_pb);
//# sourceMappingURL=data_pb.js.map